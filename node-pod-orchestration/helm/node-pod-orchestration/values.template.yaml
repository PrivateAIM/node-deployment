api:
  version: 0.1.0
  domain: localhost
idp:
  debug: false
env:
    NODE_NAME: "" #TODO
    NODE_KEY: "" #TODO
    NODE_KEY_PW: "" #TODO

    HARBOR_URL: dev-harbor.personalhealthtrain.de
    HARBOR_PW: test
    HARBOR_USER: test

    KEYCLOAK_URL: ""
    KEYCLOAK_REALM: flame

    RESULT_CLIENT_ID: service1
    RESULT_CLIENT_SECRET: ""

    POSTGRES_HOST: ""
minio:
  endpoint: ""
  accessKey: ""
  secretKey: ""

hub:
  ## @param hub.coreApi Hub core API endpoint
  coreApi: https://auth.privateaim.dev
  ## @param hub.authApi Hub auth API endpoint
  authApi: https://core.privateaim.dev

  ## Credentials used for retrieving a valid token from the hub using a robot account
  auth:
    robotUser: ""
    robotSecret: ""

postgresql:
  nameOverride: ""
  fullnameOverride: ""
  auth:
    ## @param auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
    ##
    enablePostgresUser: true
    ## @param auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` is provided
    ##
    postgresPassword: ""
    username: "admin"
    password: "admin"
    database: ""
    existingSecret: ""
    ## @param auth.secretKeys.adminPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
    ## @param auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
    ## @param auth.secretKeys.replicationPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
    ##
    secretKeys:
      adminPasswordKey: postgres-password
      userPasswordKey: password
      replicationPasswordKey: replication-password
    ## @param auth.usePasswordFiles Mount credentials as a files instead of using an environment variable
    ##
    usePasswordFiles: false