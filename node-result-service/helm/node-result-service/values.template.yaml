## Global variables
global:
  hub:
    endpoints:
      ## @param global.hub.endpoints.auth Hub Auth API endpoint. Overrides env.HUB__AUTH_BASE_URL
      auth: https://auth.privateaim.dev
      ## @param global.hub.endpoints.core Hub Core API endpoint. Overrides env.HUB__CORE_BASE_URL
      core: https://core.privateaim.dev
      ## @param global.hub.endpoints.storage Hub Storage API endpoint. Overrides env.HUB__STORAGE_BASE_URL
      storage: https://storage.privateaim.dev
    auth:
      ## @param global.hub.auth.robotUser Robot user ID. Overrides env.HUB_USERNAME if provided
      robotUser:
      ## @param global.hub.auth.robotSecret Robot secret. Overrides env.HUB_PASSWORD if provided
      robotSecret:

## Hub services and data
hub:
  ## @param hub.coreApi Hub core API endpoint
  coreURL: https://core.privateaim.dev
  ## @param hub.authURL Hub auth API endpoint
  authURL: https://auth.privateaim.dev
  ## @param hub.storageURL Hub storage API endpoint
  storageURL: https://storage.privateaim.dev
  ## Credentials used for retrieving a valid robot token from the hub
  auth:
    existingSecret:
    robotUser:
    robotSecret:

env:
  MINIO_USE_SSL: false
  MINIO_BUCKET: flame
  OIDC_CERTS_URL: http://flame-node-keycloak-service:8080/realms/flame/protocol/openid-connect/certs
  OIDC_CLIENT_ID_CLAIM_NAME: azp

minio:
  # All possible values can be found at https://github.com/minio/minio/blob/master/helm/minio/values.yaml

  ## Provide a name in place of minio for `app:` labels
  nameOverride:

  ## Provide a name to substitute for the full names of resources
  fullnameOverride:

  ## set kubernetes cluster domain where minio is running
  clusterDomain: cluster.local

  ## Set default rootUser, rootPassword
  ## rootUser and rootPassword is generated when not set
  ## Distributed MinIO ref: https://min.io/docs/minio/linux/operations/install-deploy-manage/deploy-minio-multi-node-multi-drive.html
  ##
  rootUser: "admin"
  rootPassword: "s3cr3t_p4ssw0rd"

  ## Use existing Secret that store following variables:
  ##
  ## | Chart var             | .data.<key> in Secret    |
  ## |:----------------------|:-------------------------|
  ## | rootUser              | rootUser                 |
  ## | rootPassword          | rootPassword             |
  ##
  ## All mentioned variables will be ignored in values file.
  ## .data.rootUser and .data.rootPassword are mandatory,
  ## others depend on enabled status of corresponding sections.
  existingSecret:

  ## Path where PV would be mounted on the MinIO Pod
  mountPath: "/mnt/data"

  ## List of buckets to be created after minio install
  ##
  buckets: [
    {
      name: flame,
      policy: none,
      purge: false,
      versioning: false,
      objectlocking: false
    }
  ]
    #   # Name of the bucket
    # - name: bucket1
    #   # Policy to be set on the
    #   # bucket [none|download|upload|public]
    #   policy: none
    #   # Purge if bucket exists already
    #   purge: false
    #   # set versioning for
    #   # bucket [true|false]
    #   versioning: false # remove this key if you do not want versioning feature
    #   # set objectlocking for
    #   # bucket [true|false] NOTE: versioning is enabled by default if you use locking
    #   objectlocking: false
    # - name: bucket2
    #   policy: none
    #   purge: false
    #   versioning: true
    #   # set objectlocking for
    #   # bucket [true|false] NOTE: versioning is enabled by default if you use locking
    #   objectlocking: false


  ## Set default image, imageTag, and imagePullPolicy. mode is used to indicate the
  image:
    repository: quay.io/minio/minio
    tag: RELEASE.2024-03-03T17-50-39Z
    pullPolicy: IfNotPresent

  imagePullSecrets: []
  ## Update strategy for Deployments
  deploymentUpdate:
    type: RollingUpdate
    maxUnavailable: 0
    maxSurge: 100%

  mode: standalone
  # Number of drives attached to a node
  drivesPerNode: 1
  # Number of MinIO containers running
  replicas: 1
  # Number of expanded MinIO clusters
  pools: 1

  resources:
    requests:
      memory: 1Gi

  ## Update strategy for StatefulSets
  statefulSetUpdate:
    updateStrategy: RollingUpdate

  persistence:
    enabled: true
    annotations: {}

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    existingClaim:

    ## minio data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    ## Storage class of PV to bind. By default it looks for standard storage class.
    ## If the PV uses a different storage class, specify that here.
    storageClass:
    volumeName:
    accessMode: ReadWriteOnce
    size: 10Gi
result-service-postgresql:
  nameOverride:
  fullnameOverride:
  auth:
    ## @param auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
    ##
    enablePostgresUser: true
    ## @param auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` is provided
    ##
    postgresPassword:
    username: admin
    password: admin
    database:
    existingSecret:
    ## @param auth.secretKeys.adminPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
    ## @param auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
    ## @param auth.secretKeys.replicationPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
    ##
    secretKeys:
      adminPasswordKey: postgres-password
      userPasswordKey: password
      replicationPasswordKey: replication-password
    ## @param auth.usePasswordFiles Mount credentials as a files instead of using an environment variable
    ##
    usePasswordFiles: false