apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-node-result-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-node-result
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-node-result
    spec:
      containers:
        - name: results-service
          image: ghcr.io/privateaim/node-result-service:sha-68e442f
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http-result-srv
          volumeMounts:
            - name: crypto
              mountPath: /etc/crypto
              readOnly: true
          env:
            - name: CRYPTO__PROVIDER
              value: file
            - name:  CRYPTO__ECDH_PRIVATE_KEY_PATH
              value: /etc/crypto/private_key.pem
            - name: UVICORN_LOG_LEVEL
              value: debug
              ## TODO: make dynamic forom env
            - name: POSTGRES__HOST
              value: flame-node-result-service-postgresql
            - name: POSTGRES__DB
              value: postgres_db
              ## TODO: add _helpers.tpl in case we want to use secret instead for postgres user/pwd
            - name: POSTGRES__USER
              value: postgres
            - name: POSTGRES__PASSWORD
              value: postgres
            - name: MINIO__ENDPOINT
              value: {{ .Release.Name }}-minio:9000
              ## TODO: add _helpers.tpl in case we want to use secret instead for minio user/pwd
            - name: MINIO__ACCESS_KEY
              value: {{ required "MinIO user must be set." .Values.minio.rootUser | quote }}
            - name: MINIO__SECRET_KEY
              value: {{ required "MinIO password must be set." .Values.minio.rootPassword | quote }}
            - name: MINIO__USE_SSL
              value: {{ .Values.env.MINIO_USE_SSL | default false | quote }}
            - name: MINIO__BUCKET
              value: {{ required "MinIO bucket must be set." .Values.env.MINIO_BUCKET | quote }}
            - name: HUB__AUTH_METHOD
              value: "robot"
            - name: HUB__ROBOT_AUTH__ID
              value: {{ required "Hub robot id must be set." (include "results.hub.robotUser" .)  | quote }}
            - name: HUB__ROBOT_AUTH__SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "results.hub.secretName" . }}
                  key: "robotSecret"
            - name: HUB__AUTH_BASE_URL
              value: {{ (include "results.hub.authApi" .) | default "https://auth.privateaim.dev" | quote }}
            - name: HUB__CORE_BASE_URL
              value: {{ (include "results.hub.coreApi" .) | default "https://core.privateaim.dev" | quote }}
            - name: HUB__STORAGE_BASE_URL
              value: {{ (include "results.hub.storageApi" .) | default "https://storage.privateaim.dev" | quote }}
            - name: OIDC__CERTS_URL
              value: {{ include "results.keycloak.endpoint" . }}
            - name: OIDC__CLIENT_ID_CLAIM_NAME
              value: {{ .Values.env.OIDC_CLIENT_ID_CLAIM_NAME }}
            # Change this to "1" for testing purposes. This will cause the value of OIDC__CERTS_URL to be
            # ignored. You will still need to set this variable for the service to start up correctly.
            - name: OIDC__SKIP_JWT_VALIDATION
              value: "0"
      volumes:
        - name: crypto
          secret:
            secretName: ecdh-private-key-secret

#           startupProbe:
#             httpGet:
#               path: /healthz
#               port: http-result-srv
#             failureThreshold: 5
#             periodSeconds: 5
#           livenessProbe:
#             httpGet:
#               path: /healthz
#               port: http-result-srv
#             failureThreshold: 3
#             periodSeconds: 10
